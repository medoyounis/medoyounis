Welcome to Battleship!

In this project you will build a simplified, one-player version of the classic board game Battleship! 
In this version of the game, there will be a single ship hidden in a random location on a 5x5 grid. The player will have 10 guesses 
to try to sink the ship.

To build this game we will use our knowledge of lists, conditionals and functions in Python. When you’re ready to get started, click Next to continue.
Now we’ll use a built-in Python function to generate our board, which we’ll make into a 5 x 5 grid of all "O"s, for “ocean.”
 Let’s add a print statement that displays the location of the hidden ship.e’ll remove this output when we’re 
finished debugging since if we left it in, our game wouldn’t be very challenging. 
On line 29, add an if to check if guess_row equals ship_row and guess_col equals ship_col.

If that is the case, please print out "Congratulations! You sank my battleship!"

Add an else under the if we wrote in the previous step.

Print out "You missed my battleship!"

Set the list element at guess_row, guess_col to "X".

As the last line in your else statement, call print_board(board) again so you can see the "X".Make sure to enter a col and row that is on the board!
Add a new if statement that is nested under the else.

Like the example above, it should check if guess_row is not in range(5) or guess_col is not in range(5).

If that is the case, print out "Oops, that's not even in the ocean."

After your new if statement, add an else that contains your existing handler for an incorrect guess. Don’t forget to indent the code!
Add an elif to see if the guessed location already has an ‘X’ in it.

If it has, print "You guessed that one already."
If someone runs out of guesses without winning right now, the game just exits. It would be nice to let them know why.

Since we only want this message to display if the user guesses wrong on their last turn, we need to think carefully about where to put it.

    We’ll want to put it under the else that accounts for misses
    We’ll want to print the message no matter what the cause of the miss
    Since our turn variable starts at 0 and goes to 3, we will want to end the game when turn equals 3.

Add an if statement that checks to see if the user is out of guesses.

    Put it under the else that accounts for misses.
    Put it after the if/elif/else statements that check for the reason the player missed. We want "Game Over" to print regardless of the reason.

If turn equals 3, print "Game Over".




